package edu.stanford.ee368;

import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import android.app.Activity;
import android.content.Context;
import android.hardware.Camera;
import android.hardware.Camera.Size;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.WindowManager;


public class HDR extends Activity {
	/** Called when the activity is first created. */
	private Preview mPreview;
	private static final String TAG = "HDR";

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		// Hide the window title
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		// Create our Preview view and set it as the content of our activity.
		mPreview = new Preview(this);
		setContentView(mPreview);
	}
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent ev) {
		// do something when the button is clicked
		switch (keyCode) {
		case KeyEvent.KEYCODE_CAMERA:
			onShotButton();
			break;
		case KeyEvent.KEYCODE_DPAD_CENTER:
			onShotButton();
			break;
		case KeyEvent.KEYCODE_BACK:
			onExitButton();
		default:
			break;
		}
		return false;
	}

	private void onShotButton() {
		Log.e(TAG, "shot!");
	}

	private void onExitButton() {
		finish();
	}
}

class Preview extends SurfaceView implements SurfaceHolder.Callback {
	Camera mCamera;
	SurfaceHolder mHolder;


	public Preview(Context context) {
		super(context);
		mHolder = getHolder();
		mHolder.addCallback(this);
		mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
	}

	public void surfaceCreated(SurfaceHolder holder) {
		mCamera = Camera.open();
		try {
			mCamera.setPreviewDisplay(mHolder);
		} 
		catch (IOException exception) {
			mCamera.release();
			mCamera = null;
		}
	}

	private Size getOptimalPreviewSize(List<Size> sizes, int w, int h) {
		final double ASPECT_TOLERANCE = 0.05;
		double targetRatio = (double) w / h;
		if (sizes == null) return null;

		Size optimalSize = null;
		double minDiff = Double.MAX_VALUE;

		int targetHeight = h;

		// Try to find an size match aspect ratio and size
		for (Size size : sizes) {
			double ratio = (double) size.width / size.height;
			if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
			if (Math.abs(size.height - targetHeight) < minDiff) {
				optimalSize = size;
				minDiff = Math.abs(size.height - targetHeight);
			}
		}

		// Cannot find the one match the aspect ratio, ignore the requirement
		if (optimalSize == null) {
			minDiff = Double.MAX_VALUE;
			for (Size size : sizes) {
				if (Math.abs(size.height - targetHeight) < minDiff) {
					optimalSize = size;
					minDiff = Math.abs(size.height - targetHeight);
				}
			}
		}
		return optimalSize;
	}



	public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
		// Now that the size is known, set up the camera parameters and begin
		// the preview.
		Camera.Parameters parameters = mCamera.getParameters();

		List<Size> sizes = parameters.getSupportedPreviewSizes();
		Size optimalSize = getOptimalPreviewSize(sizes, w, h);
		parameters.setPreviewSize(optimalSize.width, optimalSize.height);

		mCamera.setParameters(parameters);
		mCamera.startPreview();

	}

	public void surfaceDestroyed(SurfaceHolder holder) {
		mCamera.setPreviewCallback(null);
		mCamera.stopPreview();
		mCamera.release();
		mCamera = null;
	}
}

class OnlineHDR {
	// Abstract the HDR processing stuff.
	private URL hdrUrl;
	HttpURLConnection conn;
	DataOutputStream dos;
	OnlineHDR () throws Exception {
		// Constructor: opens the connection to the server
		hdrUrl = new URL("http://hdr.appspot.com/");
		conn = (HttpURLConnection) hdrUrl.openConnection();
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setAllowUserInteraction(false);
		conn.setRequestMethod("POST");

		dos = new DataOutputStream(conn.getOutputStream());
	}

	private void UploadBuffer(byte buffer[]) throws Exception {
		int bufferSize = 2048;
		int maxBufferSize = 2048;
		int bytesAvailable = 0;
		// TODO(johmathe): make this a loop over the buffer for big buffer.
		dos.write(buffer, 0, buffer.length);
	}

	private void UploadImages(String imagePaths[]) {
		File file = new File("path/to/your/file.txt");
		try {
	         HttpClient client = new DefaultHttpClient();  
	         String postURL = "http://someposturl.com";
	         HttpPost post = new HttpPost(postURL); 
		     FileBody bin = new FileBody(file);
		     MultipartEntity reqEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE); 
		     for (int i=0; i<imagePaths.length; i++) {
		    	 
		     }
		     reqEntity.addPart("image", bin);
		     post.setEntity(reqEntity);  
		     HttpResponse response = client.execute(post);  
		     HttpEntity resEntity = response.getEntity();  
		     if (resEntity != null) {    
		               Log.i("RESPONSE",EntityUtils.toString(resEntity));
		         }
		} catch (Exception e) {
		    e.printStackTrace();
		}
	}
}

class Image {
	HttpClient client = new HttpClient( );
	// Create POST method
	String weblintURL = "http://ats.nist.gov/cgi-bin/cgi.tcl/echo.cgi";
	MultipartPostMethod method =
	new MultipartPostMethod( weblintURL );
	File file = new File( "data", "test.txt" );
	File file2 = new File( "data", "sample.txt" );
	method.addParameter("test.txt", file );
	method.addPart( new FilePart( "sample.txt", file2, "text/plain", "ISO-8859-1" ) );
	// Execute and print response
	client.executeMethod( method );
	String response = method.getResponseBodyAsString( );
	System.out.println( response );
	method.releaseConnection( );
}


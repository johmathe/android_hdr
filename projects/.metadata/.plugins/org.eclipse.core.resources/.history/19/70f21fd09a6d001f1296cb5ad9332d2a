/*
 * HDRMerge.java
 *
 * Created on May 12, 2010, 2:54 PM
 *
 * Copyright 2010 Johan Mathe
 *     This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package hdr;

import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;

import jjil.core.RgbImage;
import jjil.j2se.RgbImageJ2se;

public class HDRMerge extends Frame {
	private static final long serialVersionUID = 8444623080884745517L;
	java.awt.Image img;
	RgbImage finalResult;
	RgbImage images[];
	HDRMerge(String[] image_paths, double exposures[]) {
		super("Image Frame");
		finalResult = null;
		RgbImage images[] = new RgbImage[image_paths.length];
		for (int i=0; i<image_paths.length; i++) {
			System.out.println("Loading image "+image_paths[i]+"...");
			images[i] = loadImage(image_paths[i]);
		}
		HdrAlgorithm algo = new HdrAlgorithm(images, exposures);
		// Part 1: merging LDR images to HDR
		System.out.println("Merging images...");
		algo.Merge();
		
		// Part 2: Tonemapping images
		System.out.println("Tonemapping images...");
		finalResult = algo.Tonemap();
		
		System.out.println("Finished...");
		initView();
	}
	HDRMerge(byte[][] imageBytes, double exposures[]) {
		super("Image Frame");
		finalResult = null;
		RgbImage images[] = new RgbImage[imageBytes.length];
		for (int i=0; i<images.length; i++) {
			System.out.println("Loading image...");
			images[i] = loadImage(imageBytes[i]);
		}
		HdrAlgorithm algo = new HdrAlgorithm(images, exposures);
		// Part 1: merging LDR images to HDR
		System.out.println("Merging images...");
		algo.Merge();
		
		// Part 2: Tonemapping images
		System.out.println("Tonemapping images...");
		finalResult = algo.Tonemap();
		
		System.out.println("Finished...");
		initView();
	}
	private void initView() {
	    addWindowListener(new WindowAdapter(){
	      public void windowClosing(WindowEvent we){
	        dispose();
	      }
    	});
	    setSize(850, 650);
	    setVisible(true);
	}
	private RgbImage loadImage(String path) {
	    img = getToolkit().getImage(path);
	    return RgbImageJ2se.toRgbImage(img);
	}
	private RgbImage loadImage(byte image[]) {
		img = getToolkit().createImage(image);
		return RgbImageJ2se.toRgbImage(img);
	}
	public void update(Graphics g){
	    paint(g);
	}
	  
	public void paint(Graphics g){
	    if(finalResult != null) {
	      RgbImageJ2se j2sea = new RgbImageJ2se(g);
	      j2sea.toDisplay(finalResult);
	    }
	    else
	      g.clearRect(0, 0, getSize().width, getSize().height);
	 }
	
	static double [] NormalizeExposure(double exposures[]) {
		double newExposures[] = new double[exposures.length];
		for (int i=0; i<exposures.length; i++) {
			newExposures[i] = exposures[i]/exposures[0];
		}
		return newExposures;
	}
	
	public static void main(String[] args) {
		//double exposures[] = {32.0000, 16.0000, 8.0000, 4.0000, 2.0000, 1.0000,  0.5000,  0.2500,  0.1250,  0.0625, 0.0312,  0.0156, 0.0078,  0.0039};
		double exposures[] = {1300,1000,400,320,100,80,30,25,1.666,1.25,0.3125,0.25,0.1};
	    exposures = NormalizeExposure(exposures);
		String paths[] = new String[exposures.length];
		for (int i=0; i<exposures.length; i++) {
			//paths[i] = String.format("/Users/johmathe/ee368/project/samples/memorial_church/memorial00%02d.png.jpg", i+61); 
			paths[i] = String.format("/Users/johmathe/ee368/project/samples/exposures/img%02d.jpg", i+1); 
			//System.out.println(paths[i]+" exposure:"+exposures[i]);
		}
		new HDRMerge(paths,exposures);
	}
	
	void toFile() {
	      RgbImageJ2se j2sea = new RgbImageJ2se();
	      j2sea.toFile(finalResult, "/tmp/test.jpg");
	}
}
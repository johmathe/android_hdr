package edu.stanford.ee368;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.hardware.Camera.Size;
import android.os.Bundle;
import android.os.SystemClock;
import android.util.Log;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.WindowManager;
import android.widget.ImageView;


public class HDR extends Activity {
	/** Called when the activity is first created. */
	private Preview mPreview;
	private static final String TAG = "HDR";


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		// Hide the window title
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);

		// Create our Preview view and set it as the content of our activity.
		mPreview = new Preview(this);
		setContentView(mPreview);
	}
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent ev) {
		// do something when the button is clicked
		switch (keyCode) {
		case KeyEvent.KEYCODE_CAMERA:
			onShotButton();
			break;
		case KeyEvent.KEYCODE_DPAD_CENTER:
			onShotButton();
			break;
		case KeyEvent.KEYCODE_BACK:
			onExitButton();
		default:
			break;
		}
		return false;
	}

	private void onShotButton() {
		mPreview.TakePicture();
	}

	private void onExitButton() {
		finish();
	}
	
	public void displayJpegImage(byte image[]) {
        ImageView jpegView = (ImageView)findViewById(R.id.jpgview);
        if (jpegView == null) {
       	 Log.d(TAG, "jpegview is NULL!");
        } else {
       	 Log.d(TAG, "jpegview is NOT NULL.");
	         jpegView.setImageBitmap(bm); 
	         jpegView.invalidate();
        }
	}

}

class Preview extends SurfaceView implements SurfaceHolder.Callback {
	static final String postURL = "http://192.168.1.12:8080/hdrbuilder";
	Camera mCamera;
	SurfaceHolder mHolder;
	public final String TAG = "HDR";
	boolean enoughPictures;
	int picId;
	static final int PIC_AMOUNT = 4;
	private static final int exposureOffset = -2;
	String imagePaths[];
	private ImageView jpegView;
	private HDR mActivity;

	public void TakePicture() {
		if (picId < PIC_AMOUNT) {
			setExposure();
			mCamera.takePicture(shutterCallback, rawCallback, jpegCallback); 
		} else {
			enoughPictures = true;
		}
	}
	
	private void setExposure() {
		Camera.Parameters params = mCamera.getParameters();
		Log.d(TAG, "max expo comp: " + params.getMaxExposureCompensation() + "min: " + params.getMinExposureCompensation());
		int expoComp = 2*picId+exposureOffset;
		SystemClock.sleep(200);
		Log.d(TAG, "setting expo comp to " + expoComp);
		params.setExposureCompensation(expoComp);
		mCamera.setParameters(params);
		// TODO(johmathe): set != exposures
	}
	
	ShutterCallback shutterCallback = new ShutterCallback() {
		public void onShutter() {
			// TODO Do something when the shutter closes.
			Log.e("SurfaceView", "shutter!");
		}
	};

	PictureCallback rawCallback = new PictureCallback() {
		public void onPictureTaken(byte[] _data, Camera _camera) {
			// TODO Do something with the image RAW data.
			Log.e("SurfaceView", "raw data!");
		}
	};

	PictureCallback jpegCallback = new PictureCallback() {
		public void onPictureTaken(byte[] _data, Camera _camera) {
			// TODO Do something with the image JPEG data.
			Log.e("SurfaceView", "jpeg data!");
			FileOutputStream outStream = null;
			try {
				// write to local sandbox file system
				// outStream =
				// CameraDemo.this.openFileOutput(String.format("%d.jpg",
				// System.currentTimeMillis()), 0);
				// Or write to sdcard
				//TODO(johmathe): clean obsolete files.
				imagePaths[picId] = String.format("/sdcard/%d.jpg", System.currentTimeMillis());
				outStream = new FileOutputStream(imagePaths[picId]);
				outStream.write(_data);
				outStream.close();
				Log.d(TAG, "onPictureTaken - wrote bytes: " + _data.length);
				Log.d(TAG, "image path: " + imagePaths[picId]);
				picId++;
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
			}
			Log.d(TAG, "onPictureTaken - jpeg");
			Log.e(TAG, "bool:" + enoughPictures);
			if (!enoughPictures) {
				TakePicture();
			} 
			if (enoughPictures) {
				Log.e(TAG, "Uploading images...");
				UploadImages();
				
			}
		}
	};
	public Preview(Context context) {
		super(context);
		activity = (HDR)context;
		mHolder = getHolder();
		mHolder.addCallback(this);
		mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		// Some state variables
		enoughPictures = false;
		picId = 0;
		imagePaths = new String[PIC_AMOUNT];
	}

	public void surfaceCreated(SurfaceHolder holder) {
		mCamera = Camera.open();
		try {
			mCamera.setPreviewDisplay(mHolder);
		} 
		catch (IOException exception) {
			mCamera.release();
			mCamera = null;
		}
	}

	private Size getOptimalPreviewSize(List<Size> sizes, int w, int h) {
		final double ASPECT_TOLERANCE = 0.05;
		double targetRatio = (double) w / h;
		if (sizes == null) return null;

		Size optimalSize = null;
		double minDiff = Double.MAX_VALUE;

		int targetHeight = h;

		// Try to find an size match aspect ratio and size
		for (Size size : sizes) {
			double ratio = (double) size.width / size.height;
			if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
			if (Math.abs(size.height - targetHeight) < minDiff) {
				optimalSize = size;
				minDiff = Math.abs(size.height - targetHeight);
			}
		}

		// Cannot find the one match the aspect ratio, ignore the requirement
		if (optimalSize == null) {
			minDiff = Double.MAX_VALUE;
			for (Size size : sizes) {
				if (Math.abs(size.height - targetHeight) < minDiff) {
					optimalSize = size;
					minDiff = Math.abs(size.height - targetHeight);
				}
			}
		}
		return optimalSize;
	}



	public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
		// Now that the size is known, set up the camera parameters and begin
		// the preview.
		Camera.Parameters parameters = mCamera.getParameters();

		List<Size> sizes = parameters.getSupportedPreviewSizes();
		Size optimalSize = getOptimalPreviewSize(sizes, w, h);
		parameters.setPreviewSize(optimalSize.width, optimalSize.height);

		mCamera.setParameters(parameters);
		mCamera.startPreview();

	}

	public void surfaceDestroyed(SurfaceHolder holder) {
		mCamera.setPreviewCallback(null);
		mCamera.stopPreview();
		mCamera.release();
		mCamera = null;
	}
	
	private void UploadImages() {
		
		try {
	         HttpClient client = new DefaultHttpClient();  
	         
	         HttpPost post = new HttpPost(postURL); 
	         MultipartEntity reqEntity = new MultipartEntity();
		     for (int i=0; i<imagePaths.length; i++) {
		         Log.d(TAG, imagePaths[i]);
		         
		         File imagefile      = new File(imagePaths[i]);
		         FileBody bin        = new FileBody(imagefile, "image/jpeg");
		         StringBody filename = new StringBody(imagePaths[i]);
		         reqEntity.addPart(String.format("filedata%d", i), bin);
		         reqEntity.addPart(String.format("filename%d", i), filename);
		     }
		     post.setEntity(reqEntity);  
	         HttpResponse response = client.execute(post);  
		     HttpEntity resEntity = response.getEntity();  
		     
		     if (resEntity != null) {   
		    	 byte resArray[] = EntityUtils.toByteArray(resEntity);
		    	 Log.i(TAG, "Received POST response of size " + resArray.length);
		    	 Bitmap bm = BitmapFactory.decodeByteArray(resArray, 0, resArray.length);
		    	 if (bm == null) {
		    		 Log.d(TAG, "Could not decode the bitmap, returned NULL");
		    	 } else {
		    		 Log.d(TAG, "Pointer is NOT null");
		    		 activity.dis

			     }
		     }
		} catch (Exception e) {
		    e.printStackTrace();
		}
	}
}
